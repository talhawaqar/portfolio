{"ast":null,"code":"/*!\n * jquery.counterup.js 2.1.0\n *\n * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n * Released under the GPL v2 License\n *\n * Amended by Jeremy Paris, Ciro Mattia Gonano and others\n *\n * Date: Feb 24, 2017\n */\n(function ($) {\n  \"use strict\";\n\n  $.fn.counterUp = function (options) {\n    var settings = $.extend({\n      time: 400,\n      delay: 10,\n      offset: 100,\n      beginAt: 0,\n      formatter: false,\n      context: \"window\",\n      callback: function callback() {}\n    }, options),\n        s;\n    return this.each(function () {\n      var $this = $(this),\n          counter = {\n        time: $(this).data(\"counterup-time\") || settings.time,\n        delay: $(this).data(\"counterup-delay\") || settings.delay,\n        offset: $(this).data(\"counterup-offset\") || settings.offset,\n        beginAt: $(this).data(\"counterup-beginat\") || settings.beginAt,\n        context: $(this).data(\"counterup-context\") || settings.context\n      };\n\n      var counterUpper = function counterUpper() {\n        var nums = [];\n        var divisions = counter.time / counter.delay;\n        var num = $(this).attr(\"data-num\") ? $(this).attr(\"data-num\") : $this.text();\n        var isComma = /[0-9]+,[0-9]+/.test(num);\n        num = num.replace(/,/g, \"\");\n        var decimalPlaces = (num.split(\".\")[1] || []).length;\n        if (counter.beginAt > num) counter.beginAt = num;\n        var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);\n\n        if (isTime) {\n          var times = num.split(\":\"),\n              m = 1;\n          s = 0;\n\n          while (times.length > 0) {\n            s += m * parseInt(times.pop(), 10);\n            m *= 60;\n          }\n        }\n\n        for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {\n          var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);\n\n          if (isTime) {\n            newNum = parseInt(s / divisions * i);\n            var hours = parseInt(newNum / 3600) % 24;\n            var minutes = parseInt(newNum / 60) % 60;\n            var seconds = parseInt(newNum % 60, 10);\n            newNum = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n          }\n\n          if (isComma) {\n            while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n              newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, \"$1\" + \",\" + \"$2\");\n            }\n          }\n\n          if (settings.formatter) {\n            newNum = settings.formatter.call(this, newNum);\n          }\n\n          nums.unshift(newNum);\n        }\n\n        $this.data(\"counterup-nums\", nums);\n        $this.text(counter.beginAt);\n\n        var f = function f() {\n          if (!$this.data(\"counterup-nums\")) {\n            settings.callback.call(this);\n            return;\n          }\n\n          $this.html($this.data(\"counterup-nums\").shift());\n\n          if ($this.data(\"counterup-nums\").length) {\n            setTimeout($this.data(\"counterup-func\"), counter.delay);\n          } else {\n            $this.data(\"counterup-nums\", null);\n            $this.data(\"counterup-func\", null);\n            settings.callback.call(this);\n          }\n        };\n\n        $this.data(\"counterup-func\", f);\n        setTimeout($this.data(\"counterup-func\"), counter.delay);\n      };\n\n      $this.waypoint(function (direction) {\n        counterUpper();\n        this.destroy();\n      }, {\n        offset: counter.offset + \"%\",\n        context: counter.context\n      });\n    });\n  };\n})(jQuery);","map":{"version":3,"sources":["/home/talha/projects/Rails/portfolio/app/javascript/packs/counterup.js"],"names":["$","fn","counterUp","options","settings","extend","time","delay","offset","beginAt","formatter","context","callback","s","each","$this","counter","data","counterUpper","nums","divisions","num","attr","text","isComma","test","replace","decimalPlaces","split","length","isTime","times","m","parseInt","pop","i","newNum","parseFloat","toFixed","hours","minutes","seconds","toString","call","unshift","f","html","shift","setTimeout","waypoint","direction","destroy","jQuery"],"mappings":"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","sourcesContent":["/*!\n * jquery.counterup.js 2.1.0\n *\n * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n * Released under the GPL v2 License\n *\n * Amended by Jeremy Paris, Ciro Mattia Gonano and others\n *\n * Date: Feb 24, 2017\n */\n(function ($) {\n  \"use strict\";\n  $.fn.counterUp = function (options) {\n    var settings = $.extend({ time: 400, delay: 10, offset: 100, beginAt: 0, formatter: false, context: \"window\", callback: function () { } }, options),\n      s;\n    return this.each(function () {\n      var $this = $(this),\n        counter = {\n          time: $(this).data(\"counterup-time\") || settings.time,\n          delay: $(this).data(\"counterup-delay\") || settings.delay,\n          offset: $(this).data(\"counterup-offset\") || settings.offset,\n          beginAt: $(this).data(\"counterup-beginat\") || settings.beginAt,\n          context: $(this).data(\"counterup-context\") || settings.context,\n        };\n      var counterUpper = function () {\n        var nums = [];\n        var divisions = counter.time / counter.delay;\n        var num = $(this).attr(\"data-num\") ? $(this).attr(\"data-num\") : $this.text();\n        var isComma = /[0-9]+,[0-9]+/.test(num);\n        num = num.replace(/,/g, \"\");\n        var decimalPlaces = (num.split(\".\")[1] || []).length;\n        if (counter.beginAt > num) counter.beginAt = num;\n        var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);\n        if (isTime) {\n          var times = num.split(\":\"),\n            m = 1;\n          s = 0;\n          while (times.length > 0) {\n            s += m * parseInt(times.pop(), 10);\n            m *= 60;\n          }\n        }\n        for (var i = divisions; i >= (counter.beginAt / num) * divisions; i--) {\n          var newNum = parseFloat((num / divisions) * i).toFixed(decimalPlaces);\n          if (isTime) {\n            newNum = parseInt((s / divisions) * i);\n            var hours = parseInt(newNum / 3600) % 24;\n            var minutes = parseInt(newNum / 60) % 60;\n            var seconds = parseInt(newNum % 60, 10);\n            newNum = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n          }\n          if (isComma) {\n            while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n              newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, \"$1\" + \",\" + \"$2\");\n            }\n          }\n          if (settings.formatter) {\n            newNum = settings.formatter.call(this, newNum);\n          }\n          nums.unshift(newNum);\n        }\n        $this.data(\"counterup-nums\", nums);\n        $this.text(counter.beginAt);\n        var f = function () {\n          if (!$this.data(\"counterup-nums\")) {\n            settings.callback.call(this);\n            return;\n          }\n          $this.html($this.data(\"counterup-nums\").shift());\n          if ($this.data(\"counterup-nums\").length) {\n            setTimeout($this.data(\"counterup-func\"), counter.delay);\n          } else {\n            $this.data(\"counterup-nums\", null);\n            $this.data(\"counterup-func\", null);\n            settings.callback.call(this);\n          }\n        };\n        $this.data(\"counterup-func\", f);\n        setTimeout($this.data(\"counterup-func\"), counter.delay);\n      };\n      $this.waypoint(\n        function (direction) {\n          counterUpper();\n          this.destroy();\n        },\n        { offset: counter.offset + \"%\", context: counter.context }\n      );\n    });\n  };\n})(jQuery);\n"]},"metadata":{},"sourceType":"module"}