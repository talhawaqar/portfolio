{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Packer\n * bin-packing algorithm\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /* globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['./rect'], factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./rect'));\n  } else {\n    // browser global\n    var Packery = window.Packery = window.Packery || {};\n    Packery.Packer = factory(Packery.Rect);\n  }\n})(window, function factory(Rect) {\n  'use strict'; // -------------------------- Packer -------------------------- //\n\n  /**\n   * @param {Number} width\n   * @param {Number} height\n   * @param {String} sortDirection\n   *   topLeft for vertical, leftTop for horizontal\n   */\n\n  function Packer(width, height, sortDirection) {\n    this.width = width || 0;\n    this.height = height || 0;\n    this.sortDirection = sortDirection || 'downwardLeftToRight';\n    this.reset();\n  }\n\n  var proto = Packer.prototype;\n\n  proto.reset = function () {\n    this.spaces = [];\n    var initialSpace = new Rect({\n      x: 0,\n      y: 0,\n      width: this.width,\n      height: this.height\n    });\n    this.spaces.push(initialSpace); // set sorter\n\n    this.sorter = sorters[this.sortDirection] || sorters.downwardLeftToRight;\n  }; // change x and y of rect to fit with in Packer's available spaces\n\n\n  proto.pack = function (rect) {\n    for (var i = 0; i < this.spaces.length; i++) {\n      var space = this.spaces[i];\n\n      if (space.canFit(rect)) {\n        this.placeInSpace(rect, space);\n        break;\n      }\n    }\n  };\n\n  proto.columnPack = function (rect) {\n    for (var i = 0; i < this.spaces.length; i++) {\n      var space = this.spaces[i];\n      var canFitInSpaceColumn = space.x <= rect.x && space.x + space.width >= rect.x + rect.width && space.height >= rect.height - 0.01; // fudge number for rounding error\n\n      if (canFitInSpaceColumn) {\n        rect.y = space.y;\n        this.placed(rect);\n        break;\n      }\n    }\n  };\n\n  proto.rowPack = function (rect) {\n    for (var i = 0; i < this.spaces.length; i++) {\n      var space = this.spaces[i];\n      var canFitInSpaceRow = space.y <= rect.y && space.y + space.height >= rect.y + rect.height && space.width >= rect.width - 0.01; // fudge number for rounding error\n\n      if (canFitInSpaceRow) {\n        rect.x = space.x;\n        this.placed(rect);\n        break;\n      }\n    }\n  };\n\n  proto.placeInSpace = function (rect, space) {\n    // place rect in space\n    rect.x = space.x;\n    rect.y = space.y;\n    this.placed(rect);\n  }; // update spaces with placed rect\n\n\n  proto.placed = function (rect) {\n    // update spaces\n    var revisedSpaces = [];\n\n    for (var i = 0; i < this.spaces.length; i++) {\n      var space = this.spaces[i];\n      var newSpaces = space.getMaximalFreeRects(rect); // add either the original space or the new spaces to the revised spaces\n\n      if (newSpaces) {\n        revisedSpaces.push.apply(revisedSpaces, newSpaces);\n      } else {\n        revisedSpaces.push(space);\n      }\n    }\n\n    this.spaces = revisedSpaces;\n    this.mergeSortSpaces();\n  };\n\n  proto.mergeSortSpaces = function () {\n    // remove redundant spaces\n    Packer.mergeRects(this.spaces);\n    this.spaces.sort(this.sorter);\n  }; // add a space back\n\n\n  proto.addSpace = function (rect) {\n    this.spaces.push(rect);\n    this.mergeSortSpaces();\n  }; // -------------------------- utility functions -------------------------- //\n\n  /**\n   * Remove redundant rectangle from array of rectangles\n   * @param {Array} rects: an array of Rects\n   * @returns {Array} rects: an array of Rects\n  **/\n\n\n  Packer.mergeRects = function (rects) {\n    var i = 0;\n    var rect = rects[i];\n\n    rectLoop: while (rect) {\n      var j = 0;\n      var compareRect = rects[i + j];\n\n      while (compareRect) {\n        if (compareRect == rect) {\n          j++; // next\n        } else if (compareRect.contains(rect)) {\n          // remove rect\n          rects.splice(i, 1);\n          rect = rects[i]; // set next rect\n\n          continue rectLoop; // bail on compareLoop\n        } else if (rect.contains(compareRect)) {\n          // remove compareRect\n          rects.splice(i + j, 1);\n        } else {\n          j++;\n        }\n\n        compareRect = rects[i + j]; // set next compareRect\n      }\n\n      i++;\n      rect = rects[i];\n    }\n\n    return rects;\n  }; // -------------------------- sorters -------------------------- //\n  // functions for sorting rects in order\n\n\n  var sorters = {\n    // top down, then left to right\n    downwardLeftToRight: function downwardLeftToRight(a, b) {\n      return a.y - b.y || a.x - b.x;\n    },\n    // left to right, then top down\n    rightwardTopToBottom: function rightwardTopToBottom(a, b) {\n      return a.x - b.x || a.y - b.y;\n    }\n  }; // --------------------------  -------------------------- //\n\n  return Packer;\n});","map":null,"metadata":{},"sourceType":"module"}