{"ast":null,"code":"// /*!\n//  * jquery.counterup.js 2.1.0\n//  *\n//  * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n//  * Released under the GPL v2 License\n//  *\n//  * Amended by Jeremy Paris, Ciro Mattia Gonano and others\n//  *\n//  * Date: Feb 24, 2017\n//  */\n// (function ($) {\n//   \"use strict\";\n//   $.fn.counterUp = function (options) {\n//     var settings = $.extend({ time: 400, delay: 10, offset: 100, beginAt: 0, formatter: false, context: \"window\", callback: function () { } }, options),\n//       s;\n//     return this.each(function () {\n//       var $this = $(this),\n//         counter = {\n//           time: $(this).data(\"counterup-time\") || settings.time,\n//           delay: $(this).data(\"counterup-delay\") || settings.delay,\n//           offset: $(this).data(\"counterup-offset\") || settings.offset,\n//           beginAt: $(this).data(\"counterup-beginat\") || settings.beginAt,\n//           context: $(this).data(\"counterup-context\") || settings.context,\n//         };\n//       var counterUpper = function () {\n//         var nums = [];\n//         var divisions = counter.time / counter.delay;\n//         var num = $(this).attr(\"data-num\") ? $(this).attr(\"data-num\") : $this.text();\n//         var isComma = /[0-9]+,[0-9]+/.test(num);\n//         num = num.replace(/,/g, \"\");\n//         var decimalPlaces = (num.split(\".\")[1] || []).length;\n//         if (counter.beginAt > num) counter.beginAt = num;\n//         var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);\n//         if (isTime) {\n//           var times = num.split(\":\"),\n//             m = 1;\n//           s = 0;\n//           while (times.length > 0) {\n//             s += m * parseInt(times.pop(), 10);\n//             m *= 60;\n//           }\n//         }\n//         for (var i = divisions; i >= (counter.beginAt / num) * divisions; i--) {\n//           var newNum = parseFloat((num / divisions) * i).toFixed(decimalPlaces);\n//           if (isTime) {\n//             newNum = parseInt((s / divisions) * i);\n//             var hours = parseInt(newNum / 3600) % 24;\n//             var minutes = parseInt(newNum / 60) % 60;\n//             var seconds = parseInt(newNum % 60, 10);\n//             newNum = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n//           }\n//           if (isComma) {\n//             while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n//               newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, \"$1\" + \",\" + \"$2\");\n//             }\n//           }\n//           if (settings.formatter) {\n//             newNum = settings.formatter.call(this, newNum);\n//           }\n//           nums.unshift(newNum);\n//         }\n//         $this.data(\"counterup-nums\", nums);\n//         $this.text(counter.beginAt);\n//         var f = function () {\n//           if (!$this.data(\"counterup-nums\")) {\n//             settings.callback.call(this);\n//             return;\n//           }\n//           $this.html($this.data(\"counterup-nums\").shift());\n//           if ($this.data(\"counterup-nums\").length) {\n//             setTimeout($this.data(\"counterup-func\"), counter.delay);\n//           } else {\n//             $this.data(\"counterup-nums\", null);\n//             $this.data(\"counterup-func\", null);\n//             settings.callback.call(this);\n//           }\n//         };\n//         $this.data(\"counterup-func\", f);\n//         setTimeout($this.data(\"counterup-func\"), counter.delay);\n//       };\n//       $this.waypoint(\n//         function (direction) {\n//           counterUpper();\n//           this.destroy();\n//         },\n//         { offset: counter.offset + \"%\", context: counter.context }\n//       );\n//     });\n//   };\n// })(jQuery);","map":{"version":3,"sources":["/home/talha/projects/Rails/portfolio/app/javascript/packs/counterup.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// /*!\n//  * jquery.counterup.js 2.1.0\n//  *\n//  * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n//  * Released under the GPL v2 License\n//  *\n//  * Amended by Jeremy Paris, Ciro Mattia Gonano and others\n//  *\n//  * Date: Feb 24, 2017\n//  */\n// (function ($) {\n//   \"use strict\";\n//   $.fn.counterUp = function (options) {\n//     var settings = $.extend({ time: 400, delay: 10, offset: 100, beginAt: 0, formatter: false, context: \"window\", callback: function () { } }, options),\n//       s;\n//     return this.each(function () {\n//       var $this = $(this),\n//         counter = {\n//           time: $(this).data(\"counterup-time\") || settings.time,\n//           delay: $(this).data(\"counterup-delay\") || settings.delay,\n//           offset: $(this).data(\"counterup-offset\") || settings.offset,\n//           beginAt: $(this).data(\"counterup-beginat\") || settings.beginAt,\n//           context: $(this).data(\"counterup-context\") || settings.context,\n//         };\n//       var counterUpper = function () {\n//         var nums = [];\n//         var divisions = counter.time / counter.delay;\n//         var num = $(this).attr(\"data-num\") ? $(this).attr(\"data-num\") : $this.text();\n//         var isComma = /[0-9]+,[0-9]+/.test(num);\n//         num = num.replace(/,/g, \"\");\n//         var decimalPlaces = (num.split(\".\")[1] || []).length;\n//         if (counter.beginAt > num) counter.beginAt = num;\n//         var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);\n//         if (isTime) {\n//           var times = num.split(\":\"),\n//             m = 1;\n//           s = 0;\n//           while (times.length > 0) {\n//             s += m * parseInt(times.pop(), 10);\n//             m *= 60;\n//           }\n//         }\n//         for (var i = divisions; i >= (counter.beginAt / num) * divisions; i--) {\n//           var newNum = parseFloat((num / divisions) * i).toFixed(decimalPlaces);\n//           if (isTime) {\n//             newNum = parseInt((s / divisions) * i);\n//             var hours = parseInt(newNum / 3600) % 24;\n//             var minutes = parseInt(newNum / 60) % 60;\n//             var seconds = parseInt(newNum % 60, 10);\n//             newNum = (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n//           }\n//           if (isComma) {\n//             while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n//               newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, \"$1\" + \",\" + \"$2\");\n//             }\n//           }\n//           if (settings.formatter) {\n//             newNum = settings.formatter.call(this, newNum);\n//           }\n//           nums.unshift(newNum);\n//         }\n//         $this.data(\"counterup-nums\", nums);\n//         $this.text(counter.beginAt);\n//         var f = function () {\n//           if (!$this.data(\"counterup-nums\")) {\n//             settings.callback.call(this);\n//             return;\n//           }\n//           $this.html($this.data(\"counterup-nums\").shift());\n//           if ($this.data(\"counterup-nums\").length) {\n//             setTimeout($this.data(\"counterup-func\"), counter.delay);\n//           } else {\n//             $this.data(\"counterup-nums\", null);\n//             $this.data(\"counterup-func\", null);\n//             settings.callback.call(this);\n//           }\n//         };\n//         $this.data(\"counterup-func\", f);\n//         setTimeout($this.data(\"counterup-func\"), counter.delay);\n//       };\n//       $this.waypoint(\n//         function (direction) {\n//           counterUpper();\n//           this.destroy();\n//         },\n//         { offset: counter.offset + \"%\", context: counter.context }\n//       );\n//     });\n//   };\n// })(jQuery);\n"]},"metadata":{},"sourceType":"module"}