{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * fitRows layout mode\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['../layout-mode'], factory);\n  } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) == 'object') {\n    // CommonJS\n    module.exports = factory(require('../layout-mode'));\n  } else {\n    // browser global\n    factory(window.Isotope.LayoutMode);\n  }\n})(window, function factory(LayoutMode) {\n  'use strict';\n\n  var FitRows = LayoutMode.create('fitRows');\n  var proto = FitRows.prototype;\n\n  proto._resetLayout = function () {\n    this.x = 0;\n    this.y = 0;\n    this.maxY = 0;\n\n    this._getMeasurement('gutter', 'outerWidth');\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize();\n    var itemWidth = item.size.outerWidth + this.gutter; // if this element cannot fit in the current row\n\n    var containerWidth = this.isotope.size.innerWidth + this.gutter;\n\n    if (this.x !== 0 && itemWidth + this.x > containerWidth) {\n      this.x = 0;\n      this.y = this.maxY;\n    }\n\n    var position = {\n      x: this.x,\n      y: this.y\n    };\n    this.maxY = Math.max(this.maxY, this.y + item.size.outerHeight);\n    this.x += itemWidth;\n    return position;\n  };\n\n  proto._getContainerSize = function () {\n    return {\n      height: this.maxY\n    };\n  };\n\n  return FitRows;\n});","map":null,"metadata":{},"sourceType":"module"}