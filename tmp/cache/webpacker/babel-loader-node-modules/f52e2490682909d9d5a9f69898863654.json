{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Rect\n * low-level utility class for basic geometry\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /* globals define, module */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // browser global\n    window.Packery = window.Packery || {};\n    window.Packery.Rect = factory();\n  }\n})(window, function factory() {\n  'use strict'; // -------------------------- Rect -------------------------- //\n\n  function Rect(props) {\n    // extend properties from defaults\n    for (var prop in Rect.defaults) {\n      this[prop] = Rect.defaults[prop];\n    }\n\n    for (prop in props) {\n      this[prop] = props[prop];\n    }\n  }\n\n  Rect.defaults = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  var proto = Rect.prototype;\n  /**\n   * Determines whether or not this rectangle wholly encloses another rectangle or point.\n   * @param {Rect} rect\n   * @returns {Boolean}\n  **/\n\n  proto.contains = function (rect) {\n    // points don't have width or height\n    var otherWidth = rect.width || 0;\n    var otherHeight = rect.height || 0;\n    return this.x <= rect.x && this.y <= rect.y && this.x + this.width >= rect.x + otherWidth && this.y + this.height >= rect.y + otherHeight;\n  };\n  /**\n   * Determines whether or not the rectangle intersects with another.\n   * @param {Rect} rect\n   * @returns {Boolean}\n  **/\n\n\n  proto.overlaps = function (rect) {\n    var thisRight = this.x + this.width;\n    var thisBottom = this.y + this.height;\n    var rectRight = rect.x + rect.width;\n    var rectBottom = rect.y + rect.height; // http://stackoverflow.com/a/306332\n\n    return this.x < rectRight && thisRight > rect.x && this.y < rectBottom && thisBottom > rect.y;\n  };\n  /**\n   * @param {Rect} rect - the overlapping rect\n   * @returns {Array} freeRects - rects representing the area around the rect\n  **/\n\n\n  proto.getMaximalFreeRects = function (rect) {\n    // if no intersection, return false\n    if (!this.overlaps(rect)) {\n      return false;\n    }\n\n    var freeRects = [];\n    var freeRect;\n    var thisRight = this.x + this.width;\n    var thisBottom = this.y + this.height;\n    var rectRight = rect.x + rect.width;\n    var rectBottom = rect.y + rect.height; // top\n\n    if (this.y < rect.y) {\n      freeRect = new Rect({\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: rect.y - this.y\n      });\n      freeRects.push(freeRect);\n    } // right\n\n\n    if (thisRight > rectRight) {\n      freeRect = new Rect({\n        x: rectRight,\n        y: this.y,\n        width: thisRight - rectRight,\n        height: this.height\n      });\n      freeRects.push(freeRect);\n    } // bottom\n\n\n    if (thisBottom > rectBottom) {\n      freeRect = new Rect({\n        x: this.x,\n        y: rectBottom,\n        width: this.width,\n        height: thisBottom - rectBottom\n      });\n      freeRects.push(freeRect);\n    } // left\n\n\n    if (this.x < rect.x) {\n      freeRect = new Rect({\n        x: this.x,\n        y: this.y,\n        width: rect.x - this.x,\n        height: this.height\n      });\n      freeRects.push(freeRect);\n    }\n\n    return freeRects;\n  };\n\n  proto.canFit = function (rect) {\n    return this.width >= rect.width && this.height >= rect.height;\n  };\n\n  return Rect;\n});","map":null,"metadata":{},"sourceType":"module"}