{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Packery v2.1.2\n * Gapless, draggable grid layouts\n *\n * Licensed GPLv3 for open source use\n * or Packery Commercial License for commercial use\n *\n * http://packery.metafizzy.co\n * Copyright 2013-2018 Metafizzy\n */\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /* globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['get-size/get-size', 'outlayer/outlayer', './rect', './packer', './item'], factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('get-size'), require('outlayer'), require('./rect'), require('./packer'), require('./item'));\n  } else {\n    // browser global\n    window.Packery = factory(window.getSize, window.Outlayer, window.Packery.Rect, window.Packery.Packer, window.Packery.Item);\n  }\n})(window, function factory(getSize, Outlayer, Rect, Packer, Item) {\n  'use strict'; // ----- Rect ----- //\n  // allow for pixel rounding errors IE8-IE11 & Firefox; #227\n\n  Rect.prototype.canFit = function (rect) {\n    return this.width >= rect.width - 1 && this.height >= rect.height - 1;\n  }; // -------------------------- Packery -------------------------- //\n  // create an Outlayer layout class\n\n\n  var Packery = Outlayer.create('packery');\n  Packery.Item = Item;\n  var proto = Packery.prototype;\n\n  proto._create = function () {\n    // call super\n    Outlayer.prototype._create.call(this); // initial properties\n\n\n    this.packer = new Packer(); // packer for drop targets\n\n    this.shiftPacker = new Packer();\n    this.isEnabled = true;\n    this.dragItemCount = 0; // create drag handlers\n\n    var _this = this;\n\n    this.handleDraggabilly = {\n      dragStart: function dragStart() {\n        _this.itemDragStart(this.element);\n      },\n      dragMove: function dragMove() {\n        _this.itemDragMove(this.element, this.position.x, this.position.y);\n      },\n      dragEnd: function dragEnd() {\n        _this.itemDragEnd(this.element);\n      }\n    };\n    this.handleUIDraggable = {\n      start: function handleUIDraggableStart(event, ui) {\n        // HTML5 may trigger dragstart, dismiss HTML5 dragging\n        if (!ui) {\n          return;\n        }\n\n        _this.itemDragStart(event.currentTarget);\n      },\n      drag: function handleUIDraggableDrag(event, ui) {\n        if (!ui) {\n          return;\n        }\n\n        _this.itemDragMove(event.currentTarget, ui.position.left, ui.position.top);\n      },\n      stop: function handleUIDraggableStop(event, ui) {\n        if (!ui) {\n          return;\n        }\n\n        _this.itemDragEnd(event.currentTarget);\n      }\n    };\n  }; // ----- init & layout ----- //\n\n  /**\n   * logic before any new layout\n   */\n\n\n  proto._resetLayout = function () {\n    this.getSize();\n\n    this._getMeasurements(); // reset packer\n\n\n    var width, height, sortDirection; // packer settings, if horizontal or vertical\n\n    if (this._getOption('horizontal')) {\n      width = Infinity;\n      height = this.size.innerHeight + this.gutter;\n      sortDirection = 'rightwardTopToBottom';\n    } else {\n      width = this.size.innerWidth + this.gutter;\n      height = Infinity;\n      sortDirection = 'downwardLeftToRight';\n    }\n\n    this.packer.width = this.shiftPacker.width = width;\n    this.packer.height = this.shiftPacker.height = height;\n    this.packer.sortDirection = this.shiftPacker.sortDirection = sortDirection;\n    this.packer.reset(); // layout\n\n    this.maxY = 0;\n    this.maxX = 0;\n  };\n  /**\n   * update columnWidth, rowHeight, & gutter\n   * @private\n   */\n\n\n  proto._getMeasurements = function () {\n    this._getMeasurement('columnWidth', 'width');\n\n    this._getMeasurement('rowHeight', 'height');\n\n    this._getMeasurement('gutter', 'width');\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    this._setRectSize(item.element, item.rect);\n\n    if (this.isShifting || this.dragItemCount > 0) {\n      var packMethod = this._getPackMethod();\n\n      this.packer[packMethod](item.rect);\n    } else {\n      this.packer.pack(item.rect);\n    }\n\n    this._setMaxXY(item.rect);\n\n    return item.rect;\n  };\n\n  proto.shiftLayout = function () {\n    this.isShifting = true;\n    this.layout();\n    delete this.isShifting;\n  };\n\n  proto._getPackMethod = function () {\n    return this._getOption('horizontal') ? 'rowPack' : 'columnPack';\n  };\n  /**\n   * set max X and Y value, for size of container\n   * @param {Packery.Rect} rect\n   * @private\n   */\n\n\n  proto._setMaxXY = function (rect) {\n    this.maxX = Math.max(rect.x + rect.width, this.maxX);\n    this.maxY = Math.max(rect.y + rect.height, this.maxY);\n  };\n  /**\n   * set the width and height of a rect, applying columnWidth and rowHeight\n   * @param {Element} elem\n   * @param {Packery.Rect} rect\n   */\n\n\n  proto._setRectSize = function (elem, rect) {\n    var size = getSize(elem);\n    var w = size.outerWidth;\n    var h = size.outerHeight; // size for columnWidth and rowHeight, if available\n    // only check if size is non-zero, #177\n\n    if (w || h) {\n      w = this._applyGridGutter(w, this.columnWidth);\n      h = this._applyGridGutter(h, this.rowHeight);\n    } // rect must fit in packer\n\n\n    rect.width = Math.min(w, this.packer.width);\n    rect.height = Math.min(h, this.packer.height);\n  };\n  /**\n   * fits item to columnWidth/rowHeight and adds gutter\n   * @param {Number} measurement - item width or height\n   * @param {Number} gridSize - columnWidth or rowHeight\n   * @returns measurement\n   */\n\n\n  proto._applyGridGutter = function (measurement, gridSize) {\n    // just add gutter if no gridSize\n    if (!gridSize) {\n      return measurement + this.gutter;\n    }\n\n    gridSize += this.gutter; // fit item to columnWidth/rowHeight\n\n    var remainder = measurement % gridSize;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\n    measurement = Math[mathMethod](measurement / gridSize) * gridSize;\n    return measurement;\n  };\n\n  proto._getContainerSize = function () {\n    if (this._getOption('horizontal')) {\n      return {\n        width: this.maxX - this.gutter\n      };\n    } else {\n      return {\n        height: this.maxY - this.gutter\n      };\n    }\n  }; // -------------------------- stamp -------------------------- //\n\n  /**\n   * makes space for element\n   * @param {Element} elem\n   */\n\n\n  proto._manageStamp = function (elem) {\n    var item = this.getItem(elem);\n    var rect;\n\n    if (item && item.isPlacing) {\n      rect = item.rect;\n    } else {\n      var offset = this._getElementOffset(elem);\n\n      rect = new Rect({\n        x: this._getOption('originLeft') ? offset.left : offset.right,\n        y: this._getOption('originTop') ? offset.top : offset.bottom\n      });\n    }\n\n    this._setRectSize(elem, rect); // save its space in the packer\n\n\n    this.packer.placed(rect);\n\n    this._setMaxXY(rect);\n  }; // -------------------------- methods -------------------------- //\n\n\n  function verticalSorter(a, b) {\n    return a.position.y - b.position.y || a.position.x - b.position.x;\n  }\n\n  function horizontalSorter(a, b) {\n    return a.position.x - b.position.x || a.position.y - b.position.y;\n  }\n\n  proto.sortItemsByPosition = function () {\n    var sorter = this._getOption('horizontal') ? horizontalSorter : verticalSorter;\n    this.items.sort(sorter);\n  };\n  /**\n   * Fit item element in its current position\n   * Packery will position elements around it\n   * useful for expanding elements\n   *\n   * @param {Element} elem\n   * @param {Number} x - horizontal destination position, optional\n   * @param {Number} y - vertical destination position, optional\n   */\n\n\n  proto.fit = function (elem, x, y) {\n    var item = this.getItem(elem);\n\n    if (!item) {\n      return;\n    } // stamp item to get it out of layout\n\n\n    this.stamp(item.element); // set placing flag\n\n    item.enablePlacing();\n    this.updateShiftTargets(item); // fall back to current position for fitting\n\n    x = x === undefined ? item.rect.x : x;\n    y = y === undefined ? item.rect.y : y; // position it best at its destination\n\n    this.shift(item, x, y);\n\n    this._bindFitEvents(item);\n\n    item.moveTo(item.rect.x, item.rect.y); // layout everything else\n\n    this.shiftLayout(); // return back to regularly scheduled programming\n\n    this.unstamp(item.element);\n    this.sortItemsByPosition();\n    item.disablePlacing();\n  };\n  /**\n   * emit event when item is fit and other items are laid out\n   * @param {Packery.Item} item\n   * @private\n   */\n\n\n  proto._bindFitEvents = function (item) {\n    var _this = this;\n\n    var ticks = 0;\n\n    function onLayout() {\n      ticks++;\n\n      if (ticks != 2) {\n        return;\n      }\n\n      _this.dispatchEvent('fitComplete', null, [item]);\n    } // when item is laid out\n\n\n    item.once('layout', onLayout); // when all items are laid out\n\n    this.once('layoutComplete', onLayout);\n  }; // -------------------------- resize -------------------------- //\n  // debounced, layout on resize\n\n\n  proto.resize = function () {\n    // don't trigger if size did not change\n    // or if resize was unbound. See #285, outlayer#9\n    if (!this.isResizeBound || !this.needsResizeLayout()) {\n      return;\n    }\n\n    if (this.options.shiftPercentResize) {\n      this.resizeShiftPercentLayout();\n    } else {\n      this.layout();\n    }\n  };\n  /**\n   * check if layout is needed post layout\n   * @returns Boolean\n   */\n\n\n  proto.needsResizeLayout = function () {\n    var size = getSize(this.element);\n    var innerSize = this._getOption('horizontal') ? 'innerHeight' : 'innerWidth';\n    return size[innerSize] != this.size[innerSize];\n  };\n\n  proto.resizeShiftPercentLayout = function () {\n    var items = this._getItemsForLayout(this.items);\n\n    var isHorizontal = this._getOption('horizontal');\n\n    var coord = isHorizontal ? 'y' : 'x';\n    var measure = isHorizontal ? 'height' : 'width';\n    var segmentName = isHorizontal ? 'rowHeight' : 'columnWidth';\n    var innerSize = isHorizontal ? 'innerHeight' : 'innerWidth'; // proportional re-align items\n\n    var previousSegment = this[segmentName];\n    previousSegment = previousSegment && previousSegment + this.gutter;\n\n    if (previousSegment) {\n      this._getMeasurements();\n\n      var currentSegment = this[segmentName] + this.gutter;\n      items.forEach(function (item) {\n        var seg = Math.round(item.rect[coord] / previousSegment);\n        item.rect[coord] = seg * currentSegment;\n      });\n    } else {\n      var currentSize = getSize(this.element)[innerSize] + this.gutter;\n      var previousSize = this.packer[measure];\n      items.forEach(function (item) {\n        item.rect[coord] = item.rect[coord] / previousSize * currentSize;\n      });\n    }\n\n    this.shiftLayout();\n  }; // -------------------------- drag -------------------------- //\n\n  /**\n   * handle an item drag start event\n   * @param {Element} elem\n   */\n\n\n  proto.itemDragStart = function (elem) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this.stamp(elem); // this.ignore( elem );\n\n    var item = this.getItem(elem);\n\n    if (!item) {\n      return;\n    }\n\n    item.enablePlacing();\n    item.showDropPlaceholder();\n    this.dragItemCount++;\n    this.updateShiftTargets(item);\n  };\n\n  proto.updateShiftTargets = function (dropItem) {\n    this.shiftPacker.reset(); // pack stamps\n\n    this._getBoundingRect();\n\n    var isOriginLeft = this._getOption('originLeft');\n\n    var isOriginTop = this._getOption('originTop');\n\n    this.stamps.forEach(function (stamp) {\n      // ignore dragged item\n      var item = this.getItem(stamp);\n\n      if (item && item.isPlacing) {\n        return;\n      }\n\n      var offset = this._getElementOffset(stamp);\n\n      var rect = new Rect({\n        x: isOriginLeft ? offset.left : offset.right,\n        y: isOriginTop ? offset.top : offset.bottom\n      });\n\n      this._setRectSize(stamp, rect); // save its space in the packer\n\n\n      this.shiftPacker.placed(rect);\n    }, this); // reset shiftTargets\n\n    var isHorizontal = this._getOption('horizontal');\n\n    var segmentName = isHorizontal ? 'rowHeight' : 'columnWidth';\n    var measure = isHorizontal ? 'height' : 'width';\n    this.shiftTargetKeys = [];\n    this.shiftTargets = [];\n    var boundsSize;\n    var segment = this[segmentName];\n    segment = segment && segment + this.gutter;\n\n    if (segment) {\n      var segmentSpan = Math.ceil(dropItem.rect[measure] / segment);\n      var segs = Math.floor((this.shiftPacker[measure] + this.gutter) / segment);\n      boundsSize = (segs - segmentSpan) * segment; // add targets on top\n\n      for (var i = 0; i < segs; i++) {\n        var initialX = isHorizontal ? 0 : i * segment;\n        var initialY = isHorizontal ? i * segment : 0;\n\n        this._addShiftTarget(initialX, initialY, boundsSize);\n      }\n    } else {\n      boundsSize = this.shiftPacker[measure] + this.gutter - dropItem.rect[measure];\n\n      this._addShiftTarget(0, 0, boundsSize);\n    } // pack each item to measure where shiftTargets are\n\n\n    var items = this._getItemsForLayout(this.items);\n\n    var packMethod = this._getPackMethod();\n\n    items.forEach(function (item) {\n      var rect = item.rect;\n\n      this._setRectSize(item.element, rect);\n\n      this.shiftPacker[packMethod](rect); // add top left corner\n\n      this._addShiftTarget(rect.x, rect.y, boundsSize); // add bottom left / top right corner\n\n\n      var cornerX = isHorizontal ? rect.x + rect.width : rect.x;\n      var cornerY = isHorizontal ? rect.y : rect.y + rect.height;\n\n      this._addShiftTarget(cornerX, cornerY, boundsSize);\n\n      if (segment) {\n        // add targets for each column on bottom / row on right\n        var segSpan = Math.round(rect[measure] / segment);\n\n        for (var i = 1; i < segSpan; i++) {\n          var segX = isHorizontal ? cornerX : rect.x + segment * i;\n          var segY = isHorizontal ? rect.y + segment * i : cornerY;\n\n          this._addShiftTarget(segX, segY, boundsSize);\n        }\n      }\n    }, this);\n  };\n\n  proto._addShiftTarget = function (x, y, boundsSize) {\n    var checkCoord = this._getOption('horizontal') ? y : x;\n\n    if (checkCoord !== 0 && checkCoord > boundsSize) {\n      return;\n    } // create string for a key, easier to keep track of what targets\n\n\n    var key = x + ',' + y;\n    var hasKey = this.shiftTargetKeys.indexOf(key) != -1;\n\n    if (hasKey) {\n      return;\n    }\n\n    this.shiftTargetKeys.push(key);\n    this.shiftTargets.push({\n      x: x,\n      y: y\n    });\n  }; // -------------------------- drop -------------------------- //\n\n\n  proto.shift = function (item, x, y) {\n    var shiftPosition;\n    var minDistance = Infinity;\n    var position = {\n      x: x,\n      y: y\n    };\n    this.shiftTargets.forEach(function (target) {\n      var distance = getDistance(target, position);\n\n      if (distance < minDistance) {\n        shiftPosition = target;\n        minDistance = distance;\n      }\n    });\n    item.rect.x = shiftPosition.x;\n    item.rect.y = shiftPosition.y;\n  };\n\n  function getDistance(a, b) {\n    var dx = b.x - a.x;\n    var dy = b.y - a.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  } // -------------------------- drag move -------------------------- //\n\n\n  var DRAG_THROTTLE_TIME = 120;\n  /**\n   * handle an item drag move event\n   * @param {Element} elem\n   * @param {Number} x - horizontal change in position\n   * @param {Number} y - vertical change in position\n   */\n\n  proto.itemDragMove = function (elem, x, y) {\n    var item = this.isEnabled && this.getItem(elem);\n\n    if (!item) {\n      return;\n    }\n\n    x -= this.size.paddingLeft;\n    y -= this.size.paddingTop;\n\n    var _this = this;\n\n    function onDrag() {\n      _this.shift(item, x, y);\n\n      item.positionDropPlaceholder();\n\n      _this.layout();\n    } // throttle\n\n\n    var now = new Date();\n    var isThrottled = this._itemDragTime && now - this._itemDragTime < DRAG_THROTTLE_TIME;\n\n    if (isThrottled) {\n      clearTimeout(this.dragTimeout);\n      this.dragTimeout = setTimeout(onDrag, DRAG_THROTTLE_TIME);\n    } else {\n      onDrag();\n      this._itemDragTime = now;\n    }\n  }; // -------------------------- drag end -------------------------- //\n\n  /**\n   * handle an item drag end event\n   * @param {Element} elem\n   */\n\n\n  proto.itemDragEnd = function (elem) {\n    var item = this.isEnabled && this.getItem(elem);\n\n    if (!item) {\n      return;\n    }\n\n    clearTimeout(this.dragTimeout);\n    item.element.classList.add('is-positioning-post-drag');\n    var completeCount = 0;\n\n    var _this = this;\n\n    function onDragEndLayoutComplete() {\n      completeCount++;\n\n      if (completeCount != 2) {\n        return;\n      } // reset drag item\n\n\n      item.element.classList.remove('is-positioning-post-drag');\n      item.hideDropPlaceholder();\n\n      _this.dispatchEvent('dragItemPositioned', null, [item]);\n    }\n\n    item.once('layout', onDragEndLayoutComplete);\n    this.once('layoutComplete', onDragEndLayoutComplete);\n    item.moveTo(item.rect.x, item.rect.y);\n    this.layout();\n    this.dragItemCount = Math.max(0, this.dragItemCount - 1);\n    this.sortItemsByPosition();\n    item.disablePlacing();\n    this.unstamp(item.element);\n  };\n  /**\n   * binds Draggabilly events\n   * @param {Draggabilly} draggie\n   */\n\n\n  proto.bindDraggabillyEvents = function (draggie) {\n    this._bindDraggabillyEvents(draggie, 'on');\n  };\n\n  proto.unbindDraggabillyEvents = function (draggie) {\n    this._bindDraggabillyEvents(draggie, 'off');\n  };\n\n  proto._bindDraggabillyEvents = function (draggie, method) {\n    var handlers = this.handleDraggabilly;\n    draggie[method]('dragStart', handlers.dragStart);\n    draggie[method]('dragMove', handlers.dragMove);\n    draggie[method]('dragEnd', handlers.dragEnd);\n  };\n  /**\n   * binds jQuery UI Draggable events\n   * @param {jQuery} $elems\n   */\n\n\n  proto.bindUIDraggableEvents = function ($elems) {\n    this._bindUIDraggableEvents($elems, 'on');\n  };\n\n  proto.unbindUIDraggableEvents = function ($elems) {\n    this._bindUIDraggableEvents($elems, 'off');\n  };\n\n  proto._bindUIDraggableEvents = function ($elems, method) {\n    var handlers = this.handleUIDraggable;\n    $elems[method]('dragstart', handlers.start)[method]('drag', handlers.drag)[method]('dragstop', handlers.stop);\n  }; // ----- destroy ----- //\n\n\n  var _destroy = proto.destroy;\n\n  proto.destroy = function () {\n    _destroy.apply(this, arguments); // disable flag; prevent drag events from triggering. #72\n\n\n    this.isEnabled = false;\n  }; // -----  ----- //\n\n\n  Packery.Rect = Rect;\n  Packery.Packer = Packer;\n  return Packery;\n});","map":null,"metadata":{},"sourceType":"module"}